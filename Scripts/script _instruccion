### Paso 1: Crear el archivo del script (.sh)
Este archivo contendr√° todos los comandos que definimos antes. Usaremos el shell de bash, que es est√°ndar en Linux y macOS y se puede instalar f√°cilmente en Windows (con Git Bash, por ejemplo).

Abre tu editor de c√≥digo (como VS Code, Sublime Text, etc.).

Crea un nuevo archivo y ll√°malo analizar-repo.sh. Es importante que la extensi√≥n sea .sh.

Pega el siguiente c√≥digo en el archivo:

Bash

#!/bin/bash

# --- Script para An√°lisis Exhaustivo de Repositorios JS/TS ---

# Colores para una salida m√°s amigable en la consola
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # Sin color

echo -e "${GREEN}üöÄ Iniciando an√°lisis exhaustivo del repositorio...${NC}"

# Nombre de la carpeta para los reportes
REPORT_DIR="analysis-reports"

# Crear la carpeta de reportes si no existe
mkdir -p $REPORT_DIR

# 1. Estructura de archivos
# Verifica si el comando 'tree' est√° disponible
if command -v tree &> /dev/null
then
    echo -e "${YELLOW}üå≥ Generando estructura de archivos...${NC}"
    tree -I "node_modules|dist|build|coverage|${REPORT_DIR}" > "${REPORT_DIR}/project-structure.txt"
else
    echo "Advertencia: El comando 'tree' no est√° instalado. Omitiendo la generaci√≥n de estructura de archivos."
fi

# 2. Calidad y complejidad
echo -e "${YELLOW}‚úÖ Generando reporte de calidad con ESLint...${NC}"
npx eslint . --format json --output-file "${REPORT_DIR}/eslint-report.json"

echo -e "${YELLOW}üß† Calculando complejidad del c√≥digo...${NC}"
# Asumimos que el c√≥digo fuente est√° en 'src'. C√°mbialo si es necesario.
npx ts-complexity --format json --input src/ > "${REPORT_DIR}/complexity-report.json"

# 3. Seguridad
echo -e "${YELLOW}üîí Analizando vulnerabilidades de dependencias con Snyk...${NC}"
npx snyk test --json > "${REPORT_DIR}/snyk-dependencies-report.json"

echo -e "${YELLOW}üîí Analizando tu c√≥digo en busca de vulnerabilidades con Snyk...${NC}"
npx snyk code test --json > "${REPORT_DIR}/snyk-code-report.json"

# 4. Dependencias
echo -e "${YELLOW}üì¶ Generando √°rbol completo de dependencias...${NC}"
npm ls --json > "${REPORT_DIR}/dependencies-tree.json"

echo -e "${GREEN}‚ú® ¬°An√°lisis completado! Los reportes est√°n en la carpeta '${REPORT_DIR}'.${NC}"
Guarda el archivo en la ra√≠z de uno de tus proyectos para probarlo.

Haz que el script sea ejecutable. Antes de poder correrlo, necesitas darle permisos de ejecuci√≥n. Abre una terminal en la ra√≠z de tu proyecto y ejecuta:

Bash

chmod +x analizar-repo.sh
¬°Listo! Ya tienes tu script. Para ejecutarlo, simplemente corre el siguiente comando en tu terminal:
./analizar-repo.sh

### Paso 2: C√≥mo Integrar el Script en tus Proyectos
Aqu√≠ tienes dos m√©todos, del m√°s simple al m√°s profesional y recomendado.

#### M√©todo 1: Copiar el Script en cada Proyecto (El m√°s simple)
La forma m√°s directa es simplemente copiar el archivo analizar-repo.sh a la carpeta ra√≠z de cada proyecto en el que quieras usarlo.

Pros: R√°pido y no requiere configuraci√≥n adicional.

Contras: Si actualizas el script, tendr√°s que actualizarlo manualmente en todos los proyectos.

#### M√©todo 2: Integrarlo como un Script de NPM (Recomendado)
Esta es la mejor pr√°ctica para proyectos de Node.js. Al a√±adirlo al package.json, cualquier persona que trabaje en el proyecto puede ejecutar el an√°lisis con un comando de npm est√°ndar y familiar.

Aseg√∫rate de que el archivo analizar-repo.sh est√© en la ra√≠z de tu proyecto.

Abre tu archivo package.json.

Busca la secci√≥n "scripts" y a√±ade una nueva l√≠nea. Puedes llamarlo "analyze" o como prefieras.

JSON

{
  "name": "mi-proyecto",
  "version": "1.0.0",
  "scripts": {
    "start": "node index.js",
    "test": "jest",
    "lint": "eslint .",
    "analyze": "bash ./analizar-repo.sh"
  }
}
¬°Eso es todo! Ahora, en lugar de recordar el nombre del archivo .sh, puedes simplemente ejecutar:

Bash

npm run analyze
Este comando har√° exactamente lo mismo, pero est√° integrado de forma nativa en el flujo de trabajo de tu proyecto.

### Prerrequisitos: Herramientas Necesarias
Recuerda que este script depende de las herramientas que invoca. Aseg√∫rate de tenerlas instaladas, preferiblemente de forma global para que est√©n disponibles en cualquier proyecto.

Snyk CLI:
npm install -g snyk

ts-complexity:
npm install -g ts-complexity

Tree:

Windows: Ya viene instalado.

macOS: brew install tree

Debian/Ubuntu: sudo apt-get install tree

Con el M√©todo 2, puedes estandarizar f√°cilmente el proceso de an√°lisis en todos tus repositorios. Simplemente agrega el archivo analizar-repo.sh y modifica el package.json en cada uno.